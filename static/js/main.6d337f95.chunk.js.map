{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","react_default","a","createElement","className","react_router_dom","to","Home","posts","this","props","postList","length","map","post","key","id","src","Pokeball","alt","concat","title","body","Component","connect","state","Rainbow","WrappedComponent","colors","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","components_Navbar","react_router","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d337f95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"nav-wrapper red darken-3\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"brand-logo\">Poke&apos;Times</Link>\n        <ul className=\"right\">\n          <li><Link to=\"/\">Home</Link></li>\n          <li><NavLink to=\"/about\">About</NavLink></li>\n          <li><NavLink to=\"/contact\">Contact</NavLink></li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default withRouter(Navbar);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokeball from '../pokeball.png'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Home extends Component {\n  render() {\n    const { posts } = this.props;\n    const postList = posts.length ? (\n      posts.map(post => {\n        return (\n          <div className=\"post card\" key={post.id}>\n            <img src={Pokeball} alt=\"A pokeball\" />\n            <div className=\"card-content\">\n              <Link to={`/${post.id}`}>\n                <span className=\"card-title red-text\">{post.title}</span>\n              </Link>\n              <p>{post.body}</p>\n            </div>\n          </div>\n        )\n      })\n    ) : (\n      <div className=\"centor\">No posts yet</div>\n    )\n    return (\n      <div className=\"container home\">\n        <h4 className=\"center\">Home</h4>\n        {postList}\n      </div>\n    )\n  }\n}\n\nHome.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      body: PropTypes.string\n    }))\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.posts\n  }\n}\n\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport Rainbow from '../hoc/Rainbow';\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">About</h4>\n      <p>Network into uplink math-Kowloon neon saturation point concrete sensory. Katana face forwards urban receding singularity human Chiba shoes boy skyscraper media man franchise. Shoes artisanal youtube nodal point gang boy sign cartel market. Physical-space post-RAF alcohol free-market city girl drugs towards rebar convenience store silent. Shanty town computer apophenia sensory post-table dissident sub-orbital gang BASE jump numinous chrome neon industrial grade.</p>\n    </div>\n  )\n}\n\nexport default Rainbow(About);","import React from 'react';\n\nconst Rainbow = (WrappedComponent) => {\n\n  const colors = ['red', 'pink', 'orange', 'blue', 'green', 'yellow']\n  const randomColor = colors[Math.floor(Math.random()*colors.length)]\n  const className = randomColor + '-text';\n\n  return (props) => {\n    return (\n      <div className={className}>\n        <WrappedComponent {...props} />\n      </div>\n    )\n  }\n\n}\n\nexport default Rainbow;","import React from 'react';\n\nconst Contact = () => {\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">Contact</h4>\n      <p>Network into uplink math-Kowloon neon saturation point concrete sensory. Katana face forwards urban receding singularity human Chiba shoes boy skyscraper media man franchise. Shoes artisanal youtube nodal point gang boy sign cartel market. Physical-space post-RAF alcohol free-market city girl drugs towards rebar convenience store silent. Shanty town computer apophenia sensory post-table dissident sub-orbital gang BASE jump numinous chrome neon industrial grade.</p>\n    </div>\n  )\n}\n\n\nexport default Contact;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deletePost } from '../actions/postActions';\n\nclass Post extends Component {\n  handleClick = () => {\n    this.props.deletePost(this.props.post.id);\n    this.props.history.push('/');\n  }\n  render() {\n    const post = this.props.post ? (\n      <div className=\"post\">\n        <h4 className=\"center\">{this.props.post.title}</h4>\n        <p>{this.props.post.body}</p>\n        <div className=\"center\">\n          <button className=\"btn grey\" onClick={this.handleClick}>\n          Delete Post\n          </button>\n        </div>\n      </div>\n    ): (\n      <div className=\"center\">Loading post...</div>\n    )\n    return (\n      <div className=\"container\">\n        {post}\n      </div>\n    )\n  }\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    body: PropTypes.string\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }),\n  deletePost: PropTypes.func\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.match.params.post_id;\n  return {\n    post: state.posts.find(post => post.id === id)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deletePost: (id) => { dispatch(deletePost(id)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","export const deletePost = (id) => {\n  return {\n    type: 'DELETE_POST',\n    id}\n}","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Post from './components/Post';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route path='/:post_id' component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  posts: [\n    {id: '1', title: 'Decay youtube singularity', body: 'Car jeans-ware San Francisco stimulate nodality lights office tanto 3D-printed military-grade physical math-Chiba denim concrete. Girl gang boat papier-mache corporation otaku apophenia disposable carbon shanty town shrine. Hotdog vehicle artisanal decay carbon human cartel shoes modem. Franchise post-industrial grade drone silent media neon 8-bit warehouse free-market boy augmented reality marketing. Tower rifle dolphin plastic dome augmented reality DIY. '},\n    {id: '2', title: 'Monofilament concrete semiotics', body: 'Car carbon meta-free-market pen saturation point tiger-team systema Chiba assault apophenia. J-pop dissident shoes tattoo assassin-space industrial grade cardboard camera into denim wonton soup face forwards lights artisanal. Weathered tower bridge dissident tube beef noodles pistol-ware advert smart-city claymore mine otaku disposable grenade soul-delay shanty town. Meta-katana San Francisco tower media jeans pistol camera nodality realism plastic rifle. Construct neon otaku hacker artisanal city rain bicycle alcohol boy Kowloon marketing voodoo god. Nano-boy pistol vehicle into office San Francisco knife urban sensory jeans sub-orbital. Drone RAF fluidity apophenia concrete rebar stimulate sub-orbital neon towards dead DIY uplink carbon fetishism augmented reality. Into Tokyo monofilament DIY voodoo god free-market nano-sensory refrigerator marketing man cardboard numinous neural jeans network.'},\n    {id: '3', title: 'Sentient sunglasses network rebar', body: 'Cardboard marketing motion office garage smart-futurity gang rebar sentient receding BASE jump. Rain man refrigerator hotdog nodal point dead spook augmented reality. Convenience store j-pop BASE jump hotdog warehouse industrial grade nodal point. Shanty town drugs-ware paranoid bomb wonton soup systemic shoes motion nano-euro-pop nodality man semiotics smart-pen advert. Hacker beef noodles crypto-franchise sensory spook dead Shibuya chrome nodality hotdog monofilament neural. Engine beef noodles vehicle post-cardboard katana tube neural.'}\n  ]\n}\n\nconst rootReducer = (state = initState, action) => {\n  if (action.type === 'DELETE_POST') {\n    let newPosts = state.posts.filter(post => post.id!==action.id);\n    return {\n      ...state,\n      posts: newPosts\n    }\n  }\n  return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}